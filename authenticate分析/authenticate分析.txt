在MVC中在对ctx添加全局状态(最后处理url之前)之前做authenticate验证，过程分析如下：
(authenticate验证后，主要是绑定ctx.state.__user__)

从ctx获取cookie,这里项目定的cookie名字为'isession'（浏览器会存储网站以及对应的cookie，网站是唯一的，不用关心cookie名是否与别的网站相同）
如果存在cookie,则从cookie中解析出user,判断user是否被锁(比如注册未激活？).如果不存在cookie则不处理，user就是空.
如果从cookie解析user失败，或者user被加锁，都让user为空．说明该cookie失效，删除掉（就是设置过期时间为当前时间）
--cookie中解析user的过程：
--auth.parseSessionCookie(s) --s为cookie，对cookie解码（base64编码解码为string）
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
项目中对字符串使用base64编码和解码分析：
编码时():先用base64编码，然后用'-'替换'+',用'_'替换'/',用'.'替换'='
function _safe_b64encode(s) {
    let b64 = Buffer.from(s).toString('base64');
    return b64.replace(re_add, '-').replace(re_sla, '_').replace(re_equ, '.');
}
解码相反：先对字符串用'+'替换'-',用'/'替换'_',用'='替换'.'．
然后用base64解码
function _safe_b64decode(s) {
    let b64 = s.replace(re_r_add, '+').replace(re_r_sla, '/').replace(re_r_equ, '=');
    return Buffer.from(b64, 'base64').toString();
}
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊




经过上述步骤，如果user为空，则对basic请求再做验证，解析出basic请求中的user信息，当然还需要判断是否被锁，被锁则user为空．
--basic请求解析user的过程：
--

经过上述步骤，如果user不为空，那么就对ctx.state__user__进行绑定,绑定如下：
ctx.state.__user__ = {
            id: user.id,
            role: user.role,
            email: user.email,
            verified: user.verified,
            name: user.name,
            image_url: user.image_url,
            created_at: user.created_at
        };

并创建ctx.checkPermission函数，检查权限用
ctx.checkPermission = (expectedRole) => {
        if (ctx.state.__user__ === null || (ctx.state.__user__.role > expectedRole)) {
            logger.warn('check permission failed: expected = ' + expectedRole + ', actual = ' + (ctx.state.__user__ ? ctx.state.__user__.role : 'null'));
            throw api.notAllowed('Do not have permission.');
        }
    };
（根据user是否为空或者user的role来判断）
根据上面解析user的过程，如果user为空那么ctx.state.__user__肯定为空，在跳出这个middleware之后就可以只通过ctx来判断了．
默认设置的role值为：
constants.role:
role: {
        ADMIN:       0,
        EDITOR:      10,
        CONTRIBUTOR: 100,
        SPONSOR:     1000,
        SUBSCRIBER:  10000,
        GUEST:       100000000
    },


